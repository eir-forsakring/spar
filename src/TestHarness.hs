{-# LANGUAGE OverloadedStrings #-}

module TestHarness where

import Control.Monad (forM_)
import Data.Default
import Data.Function ((&))
import Data.Generics.Labels ()
import Data.Text (Text)
import qualified Data.Text as T
import qualified Data.Text.Lazy as TL
import Data.XML
import Spar (queryWithSSN)
import Spar.Parsing (deserializeSoapDocument)
import Spar.Types
import System.IO (IOMode (ReadMode), hGetContents, openFile)
import qualified System.IO as IO
import qualified Text.XML as XC

testSSNs :: [Text]
testSSNs =
  [ "193806099101",
    "194001079120",
    "194002219113",
    "194103219202",
    "194208106593",
    "194411155858",
    "194509287068",
    "194601274758",
    "194606233411",
    "194703103111",
    "194812161596",
    "195309112489",
    "195404132382",
    "195406172626",
    "195704133106",
    "196110023055",
    "196208132834",
    "196210053143",
    "196211022766",
    "196305782390",
    "196508163257",
    "196604072675",
    "196709132887",
    "196805029268",
    "196805249288",
    "197001239297",
    "197109259288",
    "197110021834",
    "197503259280",
    "197503309176",
    "197504049292",
    "197504249215",
    "197605832380",
    "197901049283",
    "197901249297",
    "197902069272",
    "197902199285",
    "197903169261",
    "197903309230",
    "197904079295",
    "197904299281",
    "197905169251",
    "197905209289",
    "197906189282",
    "197906209239",
    "197907099282",
    "197907179191",
    "197908089274",
    "197908109288",
    "197909089265",
    "197909189230",
    "197910039283",
    "197910209290",
    "197911109291",
    "197911239262",
    "197912129280",
    "197912309296",
    "198001139297",
    "198001249286",
    "198002079294",
    "198002289224",
    "198003119255",
    "198003219295",
    "198004119288",
    "198004209295",
    "198005049294",
    "198005149284",
    "198006089240",
    "198006299252",
    "198007199295",
    "198007299285",
    "198008209275",
    "198008289285",
    "198009139265",
    "198009269252",
    "198010229238",
    "198010279266",
    "198011159285",
    "198011169235",
    "198012109289",
    "198012279272",
    "198101079294",
    "198101199282",
    "198102179291",
    "198102259267",
    "198103179241",
    "198103269299",
    "198104059293",
    "198104239267",
    "198105109253",
    "198105169281",
    "198106039228",
    "198106079257",
    "198107039276",
    "198107249289",
    "198108119291",
    "198108189260",
    "198109079296",
    "198109249287",
    "198110019299",
    "198110259283",
    "198111289297",
    "198111309285",
    "198112199289",
    "198112279297",
    "198112752384",
    "198201179283",
    "198201209296",
    "198202029289",
    "198202119296",
    "198203249274",
    "198203269264",
    "198204179298",
    "198204259264",
    "198205049250",
    "198205159281",
    "198206139290",
    "198206169289",
    "198207059299",
    "198207169288",
    "198208059280",
    "198208149297",
    "198209109282",
    "198209189292",
    "198210099290",
    "198210159284",
    "198211039295",
    "198211289288",
    "198212019296",
    "198212299286",
    "198301109289",
    "198302099265",
    "198302249274",
    "198303169281",
    "198304149282",
    "198304179297",
    "198305119284",
    "198306219299",
    "198306259287",
    "198307189285",
    "198307259294",
    "198308179285",
    "198308299299",
    "198309119264",
    "198310159283",
    "198310219277",
    "198311209285",
    "198312319281",
    "198401279289",
    "198402179298",
    "198402289287",
    "198403169280",
    "198404189287",
    "198405149280",
    "198405299291",
    "198406079288",
    "198407119281",
    "198408099284",
    "198408199290",
    "198409219287",
    "198410039278",
    "198410299286",
    "198411279287",
    "198412179288",
    "198501139995",
    "198502069993",
    "198504129886",
    "198505069883",
    "198506119992",
    "198509129881",
    "198511179882",
    "198511299995",
    "198512089882",
    "198601049995",
    "198602029996",
    "198603139885",
    "198603249999",
    "198604069883",
    "198605219990",
    "198606089889",
    "198606129990",
    "198607209882",
    "198609259992",
    "198610109996",
    "198610279880",
    "198611149991",
    "198611239883",
    "198612199995",
    "198701022389",
    "198703142391",
    "198704102386",
    "198704202392",
    "198705212382",
    "198705232398",
    "198707012392",
    "198708132397",
    "198709232386",
    "198710152391",
    "198710162382",
    "198711192396",
    "198712092389",
    "198811162398",
    "198905112390",
    "198910272395",
    "198911222399",
    "199001072389",
    "199004202389",
    "199012652385",
    "199101112390",
    "199201782399",
    "199802162389",
    "199812312388",
    "199903672385",
    "200301702395",
    "200507172393",
    "200605162395",
    "200701172389",
    "200701302382",
    "200703172387",
    "200703192385",
    "200703202390",
    "200704072388",
    "200704122399",
    "200704292382",
    "200705012391",
    "200706282399",
    "200711012385",
    "200712112382",
    "200802172387",
    "200802262386",
    "200805022381",
    "200807052394",
    "200808152391",
    "200808292387",
    "200809152382",
    "200901102392",
    "200901242396",
    "200901272385",
    "201411242389",
    "201504092394",
    "201504302389",
    "201507212387",
    "201512252394",
    "201601072398",
    "201610232397",
    "201703152395",
    "201704162393",
    "201709182388",
    "201710152396"
  ]

deserializeFile :: FilePath -> IO ()
deserializeFile path = do
  handle <- openFile path ReadMode
  contents <- hGetContents handle

  IO.print $ deserializeSoapDocument (XC.parseText_ def . TL.fromStrict . T.pack $ contents)

runTests :: IO ()
runTests = do
  forM_
    (testSSNs & take 50 . reverse)
    ( \ssn ->
        runRequestWithConfig cfg ssn
          >>= ( \case
                  Left e -> do
                    print ("Error calling " <> ssn <> " result:")
                    print e
                  Right _ -> return ()
              )
    )
  where
    cfg = Config "https://kt-ext-ws.statenspersonadressregister.se/2021.1/personsok"

-- runRequest "198307189285"

runRequestWithConfig :: Config -> SSN -> IO (Either ParserError SPARPersonsokningSvar)
runRequestWithConfig = queryWithSSN